AmpD Enertainer Document Chatbot Submission

1. Project Overview

This repository contains a Python-based chatbot application designed to answer questions about the AmpD Enertainer User Manual. The chatbot uses a Retrieval-Augmented Generation (RAG) approach, leveraging FAISS for document retrieval and a Gemini-powered LLM for answer generation. The application is built with Streamlit for an interactive web interface.

2. Backend Architecture & Technologies

Technologies Used:
- Python: Main programming language for all scripts and backend logic.
- Streamlit: For building the interactive web UI.
- FAISS: Facebook AI Similarity Search, used for fast vector-based document retrieval.
- LangChain: For agent orchestration and LLM integration.
- Google Gemini (via google-generativeai): Large Language Model for answer generation.
- Tesseract OCR: For extracting text from images in the PDF (optional, for image-based queries).
- dotenv: For environment variable management (API keys).

How It Works (Backend Flow):
1. Indexing: The PDF manual is split into text chunks and images using create_index.py. Text chunks are embedded and stored in a FAISS vector database. Images are extracted and saved in extracted_images/.
2. Retrieval: When a user asks a question, the chatbot uses FAISS to retrieve the most relevant text chunks and associated images from the manual.
3. LLM Generation: The retrieved context is sent to the Gemini LLM (via LangChain agent) to generate a natural language answer.
4. UI Display: The answer, sources, and images are displayed in the Streamlit web interface. Users can provide feedback (thumbs up/down), which is logged for future analysis.
5. Session Management: The chatbot maintains conversation history and supports session exit/reset.

Key Files:
- chatbot.py: Main Streamlit app and UI logic.
- agent.py: LangChain agent and Gemini LLM integration.
- retriever.py: FAISS-based document retriever.
- generator.py: Local answer generator (if needed).
- create_index.py: PDF chunking, embedding, and index creation.

Setup Steps (from README.md):

1. Prerequisites
   - Python 3.8+
   - pip
   - Chrome or any modern browser
   - Gemini API key from https://aistudio.google.com/ (add to .env)

2. Clone the Repository
   git clone <your-repo-url>
   cd Ampd_RAG_Application/AmpdEnergy_doc_chatbot

3. Create and Activate Virtual Environment
   On Windows (PowerShell):
   python -m venv venv
   .\venv\Scripts\activate
   On macOS/Linux:
   python3 -m venv venv
   source venv/bin/activate

4. Install Dependencies
   pip install -r requirements.txt

5. Install Tesseract OCR (for image text extraction)
   - Download from https://github.com/tesseract-ocr/tesseract
   - Update path in pdf_utils.py if needed.

6. Prepare the PDF Manual
   - Place your PDF manual in the project directory (not included in submission).

7. Build the Index
   python create_index.py --doc "Ampd Enertainer User Manual (NCM) - Rev 2.3.pdf" --index index.faiss --meta meta.json

8. Run the Chatbot
   streamlit run chatbot.py
   - Open the provided local URL in your browser (usually http://localhost:8501)

Usage
- Type your question in the input box and click "Send".
- The chatbot will retrieve relevant text and images from the manual.
- Sources and images are shown in expandable sections.
- Use the feedback buttons to rate the answers.

Troubleshooting
- If images are not displayed, ensure extracted_images/ contains the PNG files and paths in meta.json are correct.
- If Tesseract OCR is not found, check the path in pdf_utils.py.
- If Streamlit is not installed, run pip install streamlit.
- For embedding or FAISS errors, ensure all dependencies in requirements.txt are installed.

Customization
- To use a different PDF, update the --doc argument in the indexing step.
- You can adjust chunk size and overlap in create_index.py.
- The chatbot UI and logic can be customized in chatbot.py.

Feedback & Support
- For issues or suggestions, contact support@ampd.energy or use the feedback buttons in the app.

---

Enjoy querying your AmpD Enertainer manual with images and smart search!

2. File Structure


| Folder/File                | Description                                 |
|----------------------------|---------------------------------------------|
| Ampd_RAG_Application/      | Root project directory                      |
| ├── AmpdEnergy_doc_chatbot/| Main application folder                     |
| │   ├── agent.py           | LangChain agent and Gemini LLM integration  |
| │   ├── chatbot.py         | Streamlit UI and main chatbot logic         |
| │   ├── retriever.py       | FAISS-based document retriever              |
| │   ├── generator.py       | Local answer generator (if needed)          |
| │   ├── create_index.py    | PDF chunking, embedding, and index creation |
| │   ├── requirements.txt   | Python dependencies                         |
| │   ├── meta.json          | Metadata for indexed document chunks        |
| │   ├── index.faiss        | FAISS vector database file                  |
| │   ├── feedback.csv       | User feedback log                           |
| │   ├── logo.png           | Logo image for UI                           |
| │   ├── extracted_images/  | Extracted images from PDF                   |
| │   ├── UI_Images/         | UI-related images                           |
| │   ├── utils/             | Utility scripts                             |
| │   └── README.md          | App-specific documentation                  |
| └── README.md              | Main project documentation                  |


3. How to Run the Chatbot

Prerequisites
- Python 3.9 or higher
- pip (Python package manager)
- A valid Gemini API key (for LLM access)
- The document index files (index.faiss, meta.json) generated from the user manual

Installation Steps
1. Clone the Repository
   git clone https://github.com/<your-username>/Ampd_RAG_Application.git
   cd Ampd_RAG_Application/AmpdEnergy_doc_chatbot

2. Install Python Dependencies
   pip install -r requirements.txt

3. Set Up Environment Variables
   - Create a .env file in the AmpdEnergy_doc_chatbot directory.
   - Add your Gemini API key:
     GEMINI_API_KEY=your_actual_api_key_here

4. Prepare Document Index
   - Ensure index.faiss and meta.json are present in the directory.
   - If not, run create_index.py with your document to generate them.

5. Run the Chatbot
   streamlit run chatbot.py
   - The chatbot UI will open in your browser.
   - Ask questions about the manual, or type exit to end the session.

4. Usage Example

Interaction Flow:
Welcome to the AMPD Chatbot!
Ask a question about the internal document (type 'exit' to quit):
User: What is the vacation policy?
Bot: Based on the document, employees get 15 days of paid vacation per year, accruing monthly. Unused days can roll over up to 5 days.
User: How do I report harassment?
Bot: The policy states to report to HR immediately via email or the anonymous hotline. Investigations are confidential.
User: exit
Goodbye!

5. Configuration Details
- LLM: Gemini via Google GenAI API (API key required)
- Retriever: FAISS vector search over indexed document chunks
- UI: Streamlit web app
- Environment Variables: .env file for API key
- Feedback Logging: User feedback is stored in feedback.csv

6. Requirements File
A sample requirements.txt:
streamlit
langchain
faiss-cpu
google-generativeai
python-dotenv
pydantic
Add any additional dependencies as needed for your environment.

7. Additional Environment Setup
- Ensure the .env file is present and contains your Gemini API key.
- If running on Windows, use PowerShell or CMD for commands.
- For image display, ensure the extracted_images/ folder contains referenced images.

8. FAQ / Approach Notes
Q: How does the chatbot work?
A: The chatbot retrieves relevant document chunks using FAISS, then uses a Gemini-powered LLM to generate answers based on the retrieved context.
Q: How is feedback collected?
A: After each bot response, users can provide thumbs up/down feedback, which is logged in feedback.csv for future analysis.
Q: What if my API key is invalid or missing?
A: The chatbot will show a clear error message if the Gemini API key is not set or is invalid.
Q: Can I reset the session after typing 'exit'?
A: Currently, the session ends after 'exit'. To restart, refresh the Streamlit app.
Q: How do I add new documents?
A: Use create_index.py to index new documents and update index.faiss and meta.json.

9. Inline Comments
The code is documented with inline comments explaining key logic, especially in chatbot.py and agent.py.

10. Submission Link
Please find the complete code and documentation at:
https://github.com/<your-username>/Ampd_RAG_Application

Note:
Do not include the “AmpD Enertainer User Manual (NCM) - Rev 2.3.pdf” in your submission.
